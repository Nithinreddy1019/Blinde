enum Status {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

model AvailableTriggers {
  id               String @id @default(cuid())
  name             String
  metaDataSkeleton Json

  triggerId String   @unique
  trigger   Triggers @relation(fields: [triggerId], references: [id])
}

model Triggers {
  id       String @id @default(cuid())
  status   Status
  metadata Json

  triggerType AvailableTriggers?

  blindeId String  @unique
  blinde   Blindes @relation(fields: [blindeId], references: [id])

  createdAt DateTime @default(now())
}

model AvailableActions {
  id               String @id @default(cuid())
  name             String
  metaDataSkeleton Json

  actionId String  @unique
  action   Actions @relation(fields: [actionId], references: [id])
}

model Actions {
  id       String @id @default(cuid())
  status   Status
  metaData Json

  actionType AvailableActions?

  blindeId String
  blinde   Blindes @relation(fields: [blindeId], references: [id])

  createdAt DateTime @default(now())
}

model Blindes {
  id   String @id @default(cuid())
  name String

  triggerId Triggers?
  actions   Actions[]

  userId String
  user   User   @relation(fields: [userId], references: [id])

  blindeRunId String?   @unique
  blindeRun   BlindeRun? @relation(fields: [blindeRunId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime?

  published   Boolean
  publishedAt DateTime?
}

model BlindeRun {
  id     String   @id @default(cuid())
  blinde Blindes?

  blindeRunOutboxid String          @unique
  blindeRunOutbox   BlindeRunOutbox @relation(fields: [blindeRunOutboxid], references: [id])

  status      Status
  initiatedAt DateTime
  finishedAt  DateTime
}

model BlindeRunOutbox {
  id String @id @default(cuid())

  blindeRun BlindeRun?

  outboxStatus OutBoxStatus
}

enum OutBoxStatus {
  WAITING
  IN_QUEUE
}
